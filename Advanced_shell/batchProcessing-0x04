#!/usr/bin/env bash

# Define list of PokÃ©mon
POKEMON_LIST=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Define API URL, delay, and file paths
API_URL="https://pokeapi.co/api/v2/pokemon"
DELAY=2
OUTPUT_CSV="pokemon_report.csv"
ERROR_FILE="errors.txt"

# Initialize the CSV file with headers
echo "Name,Height,Weight" > "$OUTPUT_CSV"

# Initialize variables to calculate averages
total_height=0
total_weight=0
count=0

# Function to make API request and process data
fetch_pokemon_data() {
  local POKEMON=$1
  local URL="$API_URL/$POKEMON"
  
  # Make the API request and capture status code
  response=$(curl -s -w "%{http_code}" -o "$POKEMON.json" "$URL")
  status_code=$(echo "$response" | tail -n1)

  # Check if the request was successful
  if [[ "$status_code" -eq 200 ]]; then
    # Extract name, height, and weight from the JSON file
    name=$(jq -r '.name' "$POKEMON.json")
    height=$(jq -r '.height' "$POKEMON.json")
    weight=$(jq -r '.weight' "$POKEMON.json")
    
    # Check if the values are valid numbers
    if [[ "$height" =~ ^[0-9]+(\.[0-9]+)?$ ]] && [[ "$weight" =~ ^[0-9]+(\.[0-9]+)?$ ]]; then
      # Add data to the CSV
      echo "$name,$height,$weight" >> "$OUTPUT_CSV"
      
      # Update totals for average calculation
      total_height=$(echo "$total_height + $height" | bc)
      total_weight=$(echo "$total_weight + $weight" | bc)
      ((count++))
    else
      # Log error if data is invalid
      echo "Invalid data in $POKEMON.json" >> "$ERROR_FILE"
    fi
  else
    # Log error if request fails
    echo "Failed to fetch data for $POKEMON. Status code: $status_code" >> "$ERROR_FILE"
  fi

  # Cleanup JSON file after processing
  rm -f "$POKEMON.json"
}

# Run the API requests in parallel
for POKEMON in "${POKEMON_LIST[@]}"; do
  fetch_pokemon_data "$POKEMON" &  # Run each request in the background
  sleep $DELAY  # Delay to prevent rate-limiting issues
done

# Wait for all background processes to finish
wait

# Calculate the averages using awk
if [[ $count -gt 0 ]]; then
  avg_height=$(echo "scale=2; $total_height / $count" | bc)
  avg_weight=$(echo "scale=2; $total_weight / $count" | bc)

  # Print averages at the end of the CSV file
  echo "Average Height,$avg_height" >> "$OUTPUT_CSV"
  echo "Average Weight,$avg_weight" >> "$OUTPUT_CSV"
  echo "Report generated successfully: $OUTPUT_CSV"
else
  echo "No valid data to calculate averages." >> "$ERROR_FILE"
fi
